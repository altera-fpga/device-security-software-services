/*
This project, FPGA Crypto Service Server, is licensed as below

***************************************************************************

Copyright 2020-2025 Altera Corporation. All Rights Reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

***************************************************************************
*/

#include "FcsSimulator.h"
#include "utils.h"
#include "Logger.h"

CMD_RESP_MAP FcsSimulator::cmd_resp_map =
{
  {"GET_JTAG_IDCODE",             "0364F0DD"},
  {"GET_CHIPID",                  "A36F424D 448D6710"},
  {"GET_ATTESTATION_CERTIFICATE", "00000004 58048230 DD038230 010203A0 23140202 22000000 DA7049E0 4D48782A 10A36F42 30448D67 2A08060A 3DCE4886 30030304 302D312F 5503062B 240C0304 65746E49 67413A6C 78656C69 52453A62 3A30303A 64383434 30313736 66363361 64343234 0D172030 31303037 30303130 30303030 390F185A 31393939 32313332 35393533 3D305A39 39303B31 04550306 49320C03 6C65746E 6967413A 6278656C 3A304C3A 6848794E 47307955 4C685F50 75544D2D 3834343A 31373664 36336130 34323466 30763064 2A070610 3DCE4886 05060102 0004812B 00620322 06F8E104 09D8B4CD A9566CB3 E3A6A812 BBCEB5C1 99C0DB6A 647C66F1 BBF18A47 0BF202AD 71DD0576 3C81B221 0BCF69B0 C33BEC40 8B5B3B6C 80C1AE77 543D7D8F 88EAA778 4DC89D41 3422C858 CAEF20A3 40E4EED8 A10AB03C 8EFE9A1F 5CADE201 0282A3D3 028230A8 060E30A4 0F1D5503 04FF0101 02020304 061E3004 251D5503 04FF0101 06123014 05816707 06640405 81670706 64040505 061E300C 01062B0A 1C830104 04061282 300E3010 2B0A060C 01040106 12821C83 06123002 131D5503 04FF0101 01063008 0102FF01 064A3001 1F1D5503 41304304 3DA03F30 39863BA0 70747468 2F2F3A73 69637374 746E692E 632E6C65 632F6D6F 65746E6F 492F746E 2F534350 736C7263 4350492F 67615F53 78656C69 72632E62 061D306C 0E1D5503 14041604 53E12137 F83F062D EEC4F84B C7A5E9DE CFC06974 03061F30 04231D55 80163018 6A8F9114 B4A14560 E281A3EA 7A9B8624 7CFC61E2 0182305B 67060690 04050581 FF010105 81018204 7D018230 09805F30 65746E69 6F632E6C 0001836D A6000184 063D303F 48866009 04036501 30040202 FBB09BB1 3C94488B C5D5EBA4 1E24D68F B9683B22 A8700128 BD65E4B1 D7520EB6 A0D531F3 412111C1 FC5BD859 A992910A 86600B89 F8860148 040F014D 803D300A 746E6909 632E6C65 01846D6F FF208800 0F8010C7 FF0A6810 9FF00000 00055505 00000000 00000000 AC000000 897FCDDE 4886600B 4DF88601 07040F01 09805D30 65746E69 6F632E6C 0001846D E8504088 424D7800 6710A36F D3DF448D D850A610 2ACAFDAB 149EB4FA 26E8CB41 65488C1A A37A7DFD B3228222 CE44C81B 1544C17C 8C28C867 F17EBBA9 58EC6F71 0B89BF2B 01488660 014DF886 3008040F 6909805C 6C65746E 6D6F632E A6000184 063D303F 48866009 04036501 30040202 042E1D5E B6FDC642 98F22539 9B686CB8 1BC9C143 82D3FF2E 37352812 88AEAA6E 59B29A37 31B63D8F 4B54C4FC 81BCF144 86600B89 F8860148 040F014D 801E3009 746E6909 632E6C65 01846D6F 02018800 86600B89 F8860148 040F014D 061E3017 05816706 04040405 04123014 07000210 360000ED 6F424D00 8D6710A3 060A3044 48862A08 03043DCE 00690303 31026630 0C488B00 F9AF89EA 877867CB 9DEF5BEE 0AE93D74 13696AE8 A6305289 B576A64E FB8A1EB8 28A76E16 0AAB15C4 67DD3DE5 00310280 D5DB9AEF F347F138 4064E5D2 C7F3BFA3 9333BEC3 2F3E2521 72D9FAE5 280EAA7E EB36A93E 5E5DD089 DCE5603C 8E977C77"},
  {"MCTP",                        "05030000 00000410 12100100"},
  {"GET_DEVICE_IDENTITY",         "9864C440 187CF917 4A0EEAAA 54623FEC 08F0EF48 E85066FF E698924A 685340C6"},
  {"QSPI_OPEN",                   ""},
  {"QSPI_CLOSE",                  ""},
  {"QSPI_SET_CS",                 ""},
  {"QSPI_READ",                   "62294895 00000030 00000400 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000019C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 49303819 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00044048 00044050 0004C000 0012A000 00010000 00000000 00000000 CB38E235 00000580 0012A000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 64428810 E6550E6F EAFE123E B4F08904 ED69F291 E22F7962 72319EAC EA789C68 90E4C48B 6C2980E2 C4E26885 702039CD 5153A913 A6DAAB2F 1082694F A1D9ECE0 8025F1E8 434020DD 4FF07FFF 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000"},
  {"QSPI_WRITE",                  ""}
};
uint32_t FcsSimulator::expectedSessionId = 0;
uint32_t FcsSimulator::expectedCreateSubkeyCommandLength = 0;
uint32_t FcsSimulator::expectedGetMeasurementCommandLength = 0;
uint32_t FcsSimulator::expectedGetMeasurementResponseLength = 1200;
uint32_t FcsSimulator::expectedCertificateRequest = 0;
uint32_t FcsSimulator::expectedGetAttCertResponseLength = 1300;

std::vector<uint8_t> FcsSimulator::hexStringToByteArray(std::string hexString)
{
    std::vector<uint8_t> byteArray;

    // Loop through the hex string, two characters at a time
    for (int i = hexString.size() - 2; i >= 0; i -= 2) {
        // Extract two characters representing a byte
        std::string byteString = hexString.substr(i, 2);

        // Convert the byte string to a uint8_t value
        uint8_t byteValue = static_cast<uint8_t>(
            std::stoi(byteString, nullptr, 16));

        // Add the byte to the byte array
        byteArray.push_back(byteValue);
    }

    return byteArray;
}

int FcsSimulator::fcs_get_response(const char* cmd_name, uint8_t* response_buffer, uint32_t* size)
{
    if (cmd_resp_map.find(cmd_name) != cmd_resp_map.end())
    {
        std::string info_message = "Getting response for ";
        Logger::log(info_message + std::string(cmd_name), Info);
        std::string respDataNode = FcsSimulator::cmd_resp_map[cmd_name];
        char* token = strtok(&respDataNode[0], " ");
        *size = 0;
        while (token != NULL)
        {
            std::vector<uint8_t> wordBytes = hexStringToByteArray(token);
            memcpy(response_buffer + *size, wordBytes.data(), WORD_SIZE);
            token = strtok(NULL, " ");
            *size += WORD_SIZE;
        }
    }
    else
    {
        char error_message[50];
        sprintf(error_message, "Command %s is not supported", cmd_name);
        Logger::log(error_message, Error);
        return -1;
    }

    return 0;
}
